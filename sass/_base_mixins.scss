/// ----------------------------------------------------------------------------
/// Use to separate components on the page.
/// ### Modifiers
/// * `--grey` modifier to change the background color
///
/// @example css
/// .segment {
///   @include segment();
/// }
/// ----------------------------------------------------------------------------
@mixin segment() {
  margin: 0;
  padding-bottom: ($gutter * 2) - $spacing;
  padding-top: ($gutter * 2);

  @media (min-width: $min-720) {
    padding-bottom: ($gutter * 3) - $spacing;
    padding-top: ($gutter * 3);
  }

  @media (min-width: $min-1080) {
    padding-bottom: ($gutter * 4.5) - $spacing;
    padding-top: ($gutter * 4.5);
  }

  &--grey {
    background-color: $color-lightgrey;
  }

  &--border-bottom::after,
  &--border-top::before {
    box-sizing: content-box;
    content: '';
    display: block;
    height: 0;
    margin-left: ($gutter / 2);
    margin-right: ($gutter / 2);
    max-width: $max-width;
    position: relative;

    @media (min-width: $min-480) {
      margin-left: $gutter;
      margin-right: $gutter;
    }

    @media (min-width: $min-1080) {
      margin-left: ($gutter * 2);
      margin-right: ($gutter * 2);
    }

    @media (min-width: #{strip-units(($max-width + ($gutter * 4)) * .625)}em) {
      margin-left: auto;
      margin-right: auto;
    }
  }

  &--border-bottom:last-of-type::after {
    border-bottom: 0;
  }

  &--border-top:last-of-type::after {
    border-top: 0;
  }

  &--border-bottom::after {
    border-bottom: .1rem solid $color-border;
    bottom: -($gutter * 2) + $spacing;

    @media (min-width: $min-480) {
      bottom: -($gutter * 3) + $spacing;
    }

    @media (min-width: $min-1080) {
      bottom: -($gutter * 3.5) + $spacing;
    }
  }

  &--border-top::before {
    border-top: .1rem solid $color-border;
    top: -($gutter * 2);

    @media (min-width: $min-480) {
      top: -($gutter * 3);
    }

    @media (min-width: $min-1080) {
      top: -($gutter * 4);
    }
  }
}

/// ----------------------------------------------------------------------------
/// Extends Susy by returning a container with gutters; requires
/// [Susy](http://susy.oddbird.net/).
///
/// Includes Susy's container mixin.
///
/// Should be used for the outermost container.
///
/// ### Modifiers (deprecated)
/// * `--slim` removes the gutters
/// * `--narrow` smaller width
/// * `--half` half of the max width
/// ----------------------------------------------------------------------------
@mixin container-padded {
  // Include Susy's container mixin
  @include container;

  // Tell Susy to use static values
  @include with-layout(static) {
    // Calculate the width of the container plus each gutter (doubled) and then
    // convert the value to ems for use in the media query.
    $max-width: container() + gutter-quad();
    $media-query: #{(strip-units($max-width) * .625)}em;

    @media (max-width: $max-480) {
      padding-left: gutter-half();
      padding-right: gutter-half();
    }

    @media (min-width: $min-480) {
      margin-left: gutter();
      margin-right: gutter();
    }

    @media (min-width: $min-1080) {
      margin-left: gutter-double();
      margin-right: gutter-double();
    }

    @media(min-width: $media-query) {
      margin-left: auto;
      margin-right: auto;
    }

    // These modifiers are deprecated as it's easy enough to use Susy's span
    // function to calculate widths on demand.
    &--slim {
      max-width: span(10); // $max-width - 12rem - ($gutter * 2)
    }

    &--narrow {
      max-width: span(9); // ($max-width - $min-width)
    }

    &--half {
      max-width: span(6); // ($max-width / 2)
    }
  }
}

/// ----------------------------------------------------------------------------
/// Extends Susy by returning a static width container with optional gutters;
/// requires [Susy](http://susy.oddbird.net/).
///
/// @param  {Number} $span                      - Number of columns to span
/// @param  {String} $position [inside]|outside - Inside: wrapped; outside:
///                                               wrapping (see @example)
/// @example:
/// ```scss
/// // position: inside (default)
/// .outer-container {
///   // Include Susy's default container for the outermost container
///   @include container;
///
///   .inner-container {
///     // Include the static-container mixin that spans 6 columns and is inside
///     // of another container; since 'inside' is default, the argument
///     // doesn't need to be passed.
///     @include container-static(6);
///   }
/// }
///
/// // position: outside
/// .outer-container {
///   // Include the static container mixin that spans 6 columns and is the
///   // outermost container. When set to 'outside', Susy's default container
///   // mixin will be included.
///   @include container-static(6, outside);
/// }
/// ----------------------------------------------------------------------------
@mixin container-static($span, $position: inside) {
  // Include Susy's container mixin if the static container is positioned on the
  // outside, i.e., wrapping.
  @if $position == outside {
    @include container;
  }

  // Tell Susy to use static values
  @include with-layout(static) {
    // Calculate the width of the container plus each gutter and then convert
    // the value to ems for use in the media query.
    $max-width: span($span) + gutter-double();
    $mq: #{(strip-units($max-width) * .625)}em;

    // Add horizontal margins if the static contained is positioned on the
    // outside, i.e., wrapping.
    @if $position == outside {
      margin-left: gutter();
      margin-right: gutter();
    }

    @media(min-width: $mq) {
      // Reset the horizontal margins to center the static container if it's
      // positioned on the outside, i.e., wrapping.
      @if $position == outside {
        margin-left: auto;
        margin-right: auto;
      }

      // Set a static width with Susy's `span` function
      width: span($span);
    }
  }
}
