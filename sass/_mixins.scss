/// @deprecated
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/// A simple clearfix helper
@mixin clearfix {
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
  zoom: 1;
}

/// Set up a media query passing a value to use for min width
///
/// @param {number} $screen-width - A value for the media query
/// @param {string} $method ['min'] - 'min' or 'max'
/// @example sass
/// .header {
///     @include respond-to($min-1290) {
///
///     }
/// }
@mixin respond-to($screen-width, $method: "min") {
  @media only screen and (#{$method}-width : $screen-width + 0px) {
    @content;
  }
}

/// Providing an image width and height, provides the correct aspect ratio via padding-bottom %
/// This should be used with an element of a height of 0, so that the height is determined by the padding-bottom
/// rather than the element's height property
/// @param {number} $imageWidth - The width of the image
/// @param {number} $imageHeight - The height of the image
@mixin best-fit-padding($imageWidth, $imageHeight) {
  $ratioPercentage: ($imageHeight / $imageWidth) * 100;
  padding-bottom: #{$ratioPercentage + %};
}

/// Hack to force GPU rendering (most in the community argue this should be used quite sparingly!!)
@mixin hardware-acceleration() {
  z-index: 1;
  transform: translateZ(0);
}

/// A mixin to help clean up z-index madness. Options are: `below`, `default`, `middle`, `top`, and `modal` [/doc]
@mixin z-layer( $layer: default ){
  @if $layer == below {
    z-index: -1;
  }
  @else if $layer == default {
    z-index: 1;
  }
  @else if $layer == middle {
    z-index: 10;
  }
  @else if $layer == top {
    z-index: 20;
  }
  @else if $layer == modal {
    z-index: 9999;
  }
  @else {
    z-index: 1;
  }
}

/// Standard divider used between sections
@mixin divider($position: bottom) {
  @if $position == bottom {
    border-bottom: 1px solid $divider-color;
  }
  @else if $position == top {
    border-top: 1px solid $divider-color;
  }
}

/// Sets max width and centers component
@mixin component-width() {
  max-width: 1290px;
  margin: 0 auto;
}

/// Style the author's image
/// @param {boolean} $mobile
/// @param {string}  $orientation ['vertical'] - 'vertical' or 'horizontal'
@mixin author-image($mobile, $orientation: 'vertical') {
  display: inline-block;
  width: 12vw;
  border-radius: 100%;
  vertical-align: middle;
  max-width: 40px;

  @if $orientation == 'vertical' {
    margin-bottom: 1.3rem;
  }

  @include respond-to($mobile) {
    width: 80px;
    max-width: none;

    @if $orientation == 'vertical' {
      margin-bottom: 3rem;
    }
  }
}

/// Style the author's credentials
/// @param {boolean} $mobile
@mixin author-creds($mobile) {
  display: block;
  text-align: center;
  vertical-align: middle;
}

/// Style the author's name
/// @param {boolean} $mobile
@mixin author-name($mobile) {
  margin-bottom: .5rem;
  font: {
    weight: $semibold;
    size: 4vw;
  }
  line-height: 1;
  text-transform: uppercase;
  color: $body-color;
  letter-spacing: .6px;

  @include respond-to($mobile) {
    font-size: 1.2rem;
  }
}

/// Style an author's Title
/// @param {boolean} $mobile
@mixin author-title($mobile) {
  font: {
    family: $serif;
    style: italic;
    size: 4vw;
  }
  line-height: 1;
  color: $light-text-color;
  letter-spacing: .6px;

  @include respond-to($mobile) {
    font-size: 1.4rem;
  }
}

/// Used for the see more links at the bottom of components
/// @example sass
/// .survival_guide__button-container {
///   @include see-more-link;
/// }
@mixin see-more-link {
  position: relative;
  margin-top: 40px;
  text-align: center;
  font-size: 14px;

  @include respond-to($mobile-breakpoint) {
    margin-top: 65px;
  }
}

// -----------------------------------------------------------------------------
// CSS Arrow
// -----------------------------------------------------------------------------

@mixin css-arrow($side: top, $size: 20px, $offset: 0) {
  &:after {
    @include size($size);
  }
  @if $side == top {
    &:after {
      bottom: auto;
      left: $offset;
      top: -(0.7 * $size);
    }
  }
  @if $side == right {
    &:after {
      left: auto;
      right: -(0.65 * $size);
      top: $offset;
    }
  }
  @if $side == bottom {
    &:after {
      bottom: -(0.6 * $size);
      left: $offset;
      top: auto;
    }
  }
  @if $side == left {
    &:after {
      left: -(0.6 * $size);
      right: auto;
      top: $offset;
    }
  }
}

/// Css arrow, currently only used in date picker
/// @deprecated
@mixin css-arrow-central($side: top, $size: 28px, $offset: 0) {
  @include css-arrow($side, $size, $offset);
  @if $side == top {
    &:after {
      left: 50%;
      transform: translateX(-50%);
    }
  }
  @if $side == bottom {
    &:after {
      left: 50%;
      transform: translateX(-50%);
    }
  }
  @if $side == right {
    &:after {
      top: 50%;
      transform: translateY(-50%);
    }
  }
  @if $side == left {
    &:after {
      top: 50%;
      transform: translateY(-50%);
    }
  }
}

/// @deprecated
@mixin size($size) {
  @if length($size) == 1 {
    @if $size == auto {
      width:  $size;
      height: $size;
    }

    @else if unitless($size) {
      width:  $size + px;
      height: $size + px;
    }

    @else if not(unitless($size)) {
      width:  $size;
      height: $size;
    }
  }

  // Width x Height
  @if length($size) == 2 {
    $width:  nth($size, 1);
    $height: nth($size, 2);

    @if $width == auto {
      width: $width;
    }
    @else if not(unitless($width)) {
      width: $width;
    }
    @else if unitless($width) {
      width: $width + px;
    }

    @if $height == auto {
      height: $height;
    }
    @else if not(unitless($height)) {
      height: $height;
    }
    @else if unitless($height) {
      height: $height + px;
    }
  }
}

/// Placeholder
///
/// Outputs vendor-prefixed placeholders for styling. Must be nested in a
/// rule-set.
///
/// @example scss - Usage
/// input {
///   @include placeholder {
///     color: #999;
///   }
/// }
@mixin placeholder {
  $placeholders: ':-webkit-input' ':-moz' '-moz' '-ms-input';

  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

/// Visually Hidden
///
/// Hide only visually, but have it available for screen readers
/// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin visuallyhidden($focusable: '') {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

  @if $focusable == 'focusable' {
    // Extends the .visuallyhidden class to allow the element to be focusable
    // when navigated to via the keyboard: https://www.drupal.org/node/897638

    &:active,
    &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  }
}

@mixin dropdownMenu( $top, $left, $width, $margin-left ) {

  display: block;

  position: absolute;
  z-index: 101;

  top: $top;
  left: $left;

  margin-left: $margin-left;
  padding: $gutter 0 0;

  width: $width;

  font-size: $font-size;
  color: $font-color;
  line-height: $line-height;

  border-radius: $radius;
  box-shadow: 0 -1rem 2rem rgba(0,0,0, 0);
  background: #fff;

  pointer-events: none;
  opacity: 0;
  transform: translateY(1rem);
  transition: opacity $animation-speed, transform $animation-speed, box-shadow ($animation-speed-ui * 1.5);
}

@mixin dropdownMenuVisible() {
  transform: translateY(0rem);
    opacity: 1;
    pointer-events: all;

    box-shadow: 0 3rem 9rem rgba(0,0,0, .4);
}

@mixin dropdownMenuArrow() {
  $size: 1.6rem;

  display: block;
  content: "";

  position: absolute;

  top: -($size);
  left: 50%;

  margin-left: -($size / 2);

  height: 0;
  width: 0;

  border: ($size/2) solid transparent;
  border-bottom-color: #fff;
}
