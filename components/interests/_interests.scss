@import "../../sass/webpack_deps";


$mobile-breakpoint: 717px;
$square-size: 190px;
$local_gutter: 30px;
$fluid-max: 395px;
$fluid-min: $fluid-max + 1;
$desktop-size: 1140px;

/**************************************/
/********** helper functions **********/
/**************************************/

// column size should be half of the blueprint-size
// 2 and 4 cards should show up in a single row
@function calculate-columns($blueprint-size, $card-count){
  @if $card-count == 2 or $card-count == 4 {
    @return $card-count;
  }
  @else{
    @return $blueprint-size / 2;
  }
}

// figure out odd or even based on card numbers .. (1 to 9)
@function determine-parity($card-count){
  @if $card-count % 2 == 0 {
    @return "even";
  }
  @else{
    @return "odd";
  }
}

// calculate first cards size depending on odd/even
@function calculate-first-square-size($parity){
  @if $parity == "odd"{
    @return $square-size * 2;
  }
  @else {
    @return $square-size;
  }
}

// calculates the size of the grid
// odd numbered grid size equals card numbers plus 3
// (big card == 4x small card)
@function calculate-blueprint-size($parity , $card-count){
  @if $parity == "odd"{
    @return $card-count + 3;
  }
  @else{
    @return $card-count;
  }
}

/***********************************/
/********** helper mixins **********/
/***********************************/

// outputs a media query dynamicaly
// for each whole quotient of blueprint
@mixin generate-dynamic-media-queries($square-size, $blueprint-size, $fluid-max, $card-count){
  $factor: $blueprint-size;
  $i: $blueprint-size - 1;

  @while $i > 1 {
    @if round($blueprint-size / $i) == $blueprint-size / $i {
      @media screen and (max-width: $factor * $square-size) and (min-width: $fluid-max) {
        $factor: $i;
        .interests__cards.interests__cards--#{$card-count} {
          width: $i * $square-size;
        }
      }
    }

    $i: $i - 1;
  }
}

// outputs distinct styles for all card number permutations 1-9
@mixin generate-style-permutations($card-count, $column-count, $square-size, $first-square-dimension, $g, $parity, $fluid-max){
  .interests__cards.interests__cards--#{$card-count} {
    width: $column-count * $square-size;
    .interests__card {
      &:first-child {
        width: $first-square-dimension;
        height: $first-square-dimension;
        .interests__card--inner {
          height: $first-square-dimension - $g;
          width: $first-square-dimension - $g;
          @if $parity == "odd" {
            .interests__card__link{
              //text-transform: none;
              //text-align: left;
              //font-size: 40px;

              left: $gutter;
              bottom: $gutter;
              right: $gutter;

              padding-top: 2rem;

              font-size: 4rem;
              line-height: 1;
              text-align: left;
              text-transform: none;
            }
          }
        }
      }
    }
    @media screen and (max-width: $fluid-max) {
      .interests__card {
        width: 50%;
        height: auto;
        margin-bottom: 2px;
        &:first-child {
          @if $parity == "odd" {
            width: 100%;
            height: auto;

            .interests__card--inner {
              height: 100%;
              width: 100%;
            }
          }
          @else {
            width: 50%;
            height: auto;
            .interests__card--inner{
              margin-right: 1px;
              width: calc(100% - 1px);
              height: 100%;
            }
          }
        }
        .interests__card--inner {
          height: 100%;
          width: 100%;
          padding-bottom: 100%;
        }
        &:nth-child(#{ if($parity == "odd", "even", "odd")}) {
          .interests__card--inner {
            margin-right: 1px;
            width: calc(100% - 1px);
          }
        }
      }
    }
  }
}

/******************************************/
/********** BEM component styles **********/
/******************************************/

.interests {
  margin: 0 0 $gutter;

  &__heading {
    @include h1();
  }
}

.interests__cards {
  //display: inline-block;
  margin: 0 auto;

  overflow: hidden;

  .interests__card {
    float: left;

    width: $square-size;
    height: $square-size;

    overflow: hidden;

    .interests__card--inner {
      position: relative;

      height: $square-size - $local_gutter;
      width: $square-size - $local_gutter;

      background: {
        color: #000;
        position: 0;
        size: cover;
      }

      &:before {
        display: block;
        content: "";

        position: absolute;

        top: 0;
        left: 0;
        right: 0;
        bottom: 0;

        background: linear-gradient(to top,  rgba(0,0,0,0.5) 0%,rgba(0,0,0,0) 75%);
      }

      .interests__card__link {
        position: absolute;
        z-index: 1;

        left: 1rem;
        bottom: 1rem;
        right: 1rem;

        padding-top: 1rem;

        font-size: 1.2rem;
        font-weight: 600;
        color: #fff;

        line-height: 2.5rem;
        text-align: center;
        text-transform: uppercase;

        border-top: .1rem solid rgba(255,255,255, .6);
      }
    }

    transition: transform $animation-speed;

    &:hover {
      transform: translateY(-.5rem);
    }
  }
}

//main loop to controll dymanic style creation
@for $card-count from 1 through 9 {
  $parity: determine-parity($card-count);
  $first-square-dimension: calculate-first-square-size($parity);

  $blueprint-size: calculate-blueprint-size(
                    $parity ,
                    $card-count);

  $column-count: calculate-columns(
                  $blueprint-size,
                  $card-count);

  @include generate-style-permutations(
    $card-count,
    $column-count,
    $square-size,
    $first-square-dimension,
    $local_gutter,
    $parity,
    $fluid-max);

  @include generate-dynamic-media-queries(
    $square-size,
    $blueprint-size,
    $fluid-max,
    $card-count);
}

/**************************************/
/*********  FLUID STYLES  *************/
/**************************************/

@media screen and (max-width: $fluid-max) {
  .interests .interests__cards{
    width: calc(100% - 2px);
    margin: 0 auto;
    font-size: 0;
    text-align: center;
    .interests__card{
      float: none;
      display: inline-block;
    }
  }
}

@include respond-to($fluid-min) {
  .interests__card--inner{
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}
